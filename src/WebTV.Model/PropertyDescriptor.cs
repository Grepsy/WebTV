//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace WebTV.Model
{
    public partial class PropertyDescriptor
    {
        #region Primitive Properties
    
        public virtual int PropertyDescriptorId
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string DefaultValue
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> Required
        {
            get;
            set;
        }
    
        public virtual string ValidationRegEx
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Property> Properties
        {
            get
            {
                if (_properties == null)
                {
                    var newCollection = new FixupCollection<Property>();
                    newCollection.CollectionChanged += FixupProperties;
                    _properties = newCollection;
                }
                return _properties;
            }
            set
            {
                if (!ReferenceEquals(_properties, value))
                {
                    var previousValue = _properties as FixupCollection<Property>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupProperties;
                    }
                    _properties = value;
                    var newValue = value as FixupCollection<Property>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupProperties;
                    }
                }
            }
        }
        private ICollection<Property> _properties;
    
        public virtual ICollection<Animation> Animations
        {
            get
            {
                if (_animations == null)
                {
                    var newCollection = new FixupCollection<Animation>();
                    newCollection.CollectionChanged += FixupAnimations;
                    _animations = newCollection;
                }
                return _animations;
            }
            set
            {
                if (!ReferenceEquals(_animations, value))
                {
                    var previousValue = _animations as FixupCollection<Animation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAnimations;
                    }
                    _animations = value;
                    var newValue = value as FixupCollection<Animation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAnimations;
                    }
                }
            }
        }
        private ICollection<Animation> _animations;

        #endregion
        #region Association Fixup
    
        private void FixupProperties(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Property item in e.NewItems)
                {
                    item.PropertyDescriptor = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Property item in e.OldItems)
                {
                    if (ReferenceEquals(item.PropertyDescriptor, this))
                    {
                        item.PropertyDescriptor = null;
                    }
                }
            }
        }
    
        private void FixupAnimations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Animation item in e.NewItems)
                {
                    if (!item.PropertyDescriptors.Contains(this))
                    {
                        item.PropertyDescriptors.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Animation item in e.OldItems)
                {
                    if (item.PropertyDescriptors.Contains(this))
                    {
                        item.PropertyDescriptors.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
